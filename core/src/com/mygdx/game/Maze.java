package com.mygdx.game; 

public class Maze {
	
	private String[] MAP = new String [] {
            "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B....................----------------......................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",       
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",
            "B..........................................................B",       
            "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"          
    
    };
	private int height;
    private int width;
    private boolean [][] hasItem;
 
    public Maze() {
        height = MAP.length;
        width = MAP[0].length();
        initItemData();
    }
    
    private void initItemData() {
        hasItem = new boolean[height][width];
        for(int r = 0; r < height; r++) {
            for(int c = 0; c < width; c++) {
                hasItem[r][c] = MAP[r].charAt(c) == '*';
            }
        }
    }
 
    public int getHeight() {
        return height;
    }
 
    public int getWidth() {
        return width;
    }
    
    public boolean Border(int r, int c) {
        return MAP[r].charAt(c) == 'B';
    }
 
    public boolean hasItemAt(int r, int c) {
    	return hasItem[r][c];
    }
    
    public void removeItem1At(int r, int c) {
        hasItem[r][c] = false;
    }
    
    public boolean hasBlockAt(int r, int c) {
        return MAP[r].charAt(c) == '-';
    }

}
